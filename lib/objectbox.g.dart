// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/objectBox_models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6957846498210021901),
      name: 'ObjectBoxModel',
      lastPropertyId: const IdUid(7, 2602350353833881516),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3283733997489193921),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4570207962916309760),
            name: 'A0',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5073305460273468702),
            name: 'A1',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7606232035289987940),
            name: 'A2',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4272997646480987837),
            name: 'A3',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 788614722698991631),
            name: 'A4',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2602350353833881516),
            name: 'A5',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 6957846498210021901),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ObjectBoxModel: EntityDefinition<ObjectBoxModel>(
        model: _entities[0],
        toOneRelations: (ObjectBoxModel object) => [],
        toManyRelations: (ObjectBoxModel object) => {},
        getId: (ObjectBoxModel object) => object.id,
        setId: (ObjectBoxModel object, int id) {
          object.id = id;
        },
        objectToFB: (ObjectBoxModel object, fb.Builder fbb) {
          final A2Offset = fbb.writeString(object.A2);
          final A3Offset = fbb.writeString(object.A3);
          final A4Offset = fbb.writeString(object.A4);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.A0);
          fbb.addFloat64(2, object.A1);
          fbb.addOffset(3, A2Offset);
          fbb.addOffset(4, A3Offset);
          fbb.addOffset(5, A4Offset);
          fbb.addInt64(6, object.A5.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ObjectBoxModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              A0: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              A1: const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0),
              A2: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              A3: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              A4: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              A5: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ObjectBoxModel] entity fields to define ObjectBox queries.
class ObjectBoxModel_ {
  /// see [ObjectBoxModel.id]
  static final id =
      QueryIntegerProperty<ObjectBoxModel>(_entities[0].properties[0]);

  /// see [ObjectBoxModel.A0]
  static final A0 =
      QueryIntegerProperty<ObjectBoxModel>(_entities[0].properties[1]);

  /// see [ObjectBoxModel.A1]
  static final A1 =
      QueryDoubleProperty<ObjectBoxModel>(_entities[0].properties[2]);

  /// see [ObjectBoxModel.A2]
  static final A2 =
      QueryStringProperty<ObjectBoxModel>(_entities[0].properties[3]);

  /// see [ObjectBoxModel.A3]
  static final A3 =
      QueryStringProperty<ObjectBoxModel>(_entities[0].properties[4]);

  /// see [ObjectBoxModel.A4]
  static final A4 =
      QueryStringProperty<ObjectBoxModel>(_entities[0].properties[5]);

  /// see [ObjectBoxModel.A5]
  static final A5 =
      QueryIntegerProperty<ObjectBoxModel>(_entities[0].properties[6]);
}
